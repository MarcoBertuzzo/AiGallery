@page "/contact"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

@inject ILogger<LoadImages> Logger
@inject IWebHostEnvironment Environment
@inject MyDbContext MyDbContext
@inject LanguageService LanguageService
@inject EmailService EmailService

@inject IConfiguration Configuration


@using Microsoft.Extensions.Configuration;

<div class="container">

    @if (!formSubmitted)
    {

        <div class="row">
            <div class="col-md-8 mx-auto text-center">
                <h1 class="display-4">@(LanguageService.Translate("ContactH1"))</h1>
                <p class="lead">@(LanguageService.Translate("ContactP1"))</p>
                <p class="lead">@(LanguageService.Translate("ContactP2"))</p>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">

                        <EditForm Model="contact" OnValidSubmit="Send" class="row g-3 needs-validation">
                            <DataAnnotationsValidator />

                            <fieldset>
                                <div class="col-md-6 mt-1">
                                    <label class="form-label" for="Name">@(LanguageService.Translate("Name")):</label>
                                    <InputText id="Name" @bind-Value="contact.Name" class="form-control" />
                                    
                                </div>
                                <div>
                                    <ValidationMessage For="@(() => contact.Name)" />
                                </div>


                                <div class="col-md-6 mt-3">
                                    <label class="form-label" for="Name">@(LanguageService.Translate("Email")):</label>
                                    <InputText id="Email" @bind-Value="contact.Email" class="form-control" />
                                </div>
                                <div>
                                    <ValidationMessage For="@(() => contact.Email)" />
                                </div>


                                <div class="col-md-9 mt-3">
                                    <label class="form-label" for="Name">@(LanguageService.Translate("EmailBody")):</label>
                                    <InputTextArea id="EmailBody" @bind-Value="contact.EmailBody" class="form-control" />
                                </div>
                                <div>
                                    <ValidationMessage For="@(() => contact.EmailBody)" />
                                </div>

                                <button type="submit" class="btn btn-primary mt-2">@(LanguageService.Translate("Send"))</button>

                                @if (!string.IsNullOrEmpty(formError))
                                {
                                    <pre class="alert alert-warning mt-3">@formError</pre>
                                }
                            </fieldset>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p class="alert alert-success mt-3">@(LanguageService.Translate("EmailSentSuccessfully"))!</p>
    }

</div>



@code {

    public ContactModel contact = new ContactModel();
    private bool formSubmitted;
    private string formError="";


    public class ContactModel
    {
        [Display(Name = "Name", ResourceType = typeof(Resources.Resources))]
        [Required(ErrorMessageResourceName = "PleaseEnterYour_0_", ErrorMessageResourceType = typeof(Resources.Resources))]
        [StringLength(30, ErrorMessageResourceName = "MustNotExceed30Characters", ErrorMessageResourceType = typeof(Resources.Resources))]
        public string Name { get; set; } = default!;


        [Display(Name = "Email", ResourceType = typeof(Resources.Resources))]
        [Required(ErrorMessageResourceName = "PleaseEnterYour_0_", ErrorMessageResourceType = typeof(Resources.Resources))]
        [EmailAddress(ErrorMessageResourceName = "PleaseProvideAvalid_0_", ErrorMessageResourceType = typeof(Resources.Resources))]
        [StringLength(100, ErrorMessageResourceName = "MustNotExceed100Characters", ErrorMessageResourceType = typeof(Resources.Resources))]
        public string Email { get; set; } = default!;

        [Display(Name = "EmailBody", ResourceType = typeof(Resources.Resources))]
        [Required(ErrorMessageResourceName = "PleaseEnterYour_0_", ErrorMessageResourceType = typeof(Resources.Resources))]
        [StringLength(500, ErrorMessageResourceName = "MustNotExceed500Characters", ErrorMessageResourceType = typeof(Resources.Resources))]
        public string EmailBody { get; set; } = default!;

    }

    protected override void OnInitialized()
    {
        formSubmitted = false;
    }

    public void Send()
    {
        EmailResult emailResult = EmailService.SendEmail("", "AiGallery: mail from " + contact.Email + " - " + contact.Name, contact.EmailBody);
        if (emailResult.result != 1)
            formError = emailResult.description;
        else
            formSubmitted = true;
    }
}